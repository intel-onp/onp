---
  - name: make sure kernel-devel is installed for the kernel version are currently running
    action: "{{ ansible_pkg_mgr }} name=kernel-devel-{{ ansible_kernel }} state=present"
    when: kernel_type == "inbox"

  - name: make sure kernel-devel is installed for the latest kernel
    action: "{{ ansible_pkg_mgr }} name=kernel-devel state=latest"
    when: kernel_type == "latest"
    register: kernel_inst_output

  - name: get latest kernel version
    set_fact:
      kernel_data: '{{ {"kernel_version": kernel_inst_output.results[0] | regex_replace("[\s\S]*kernel-devel-(\S+)[\s\S]*", "\\1"), "kernel_base_url": ""} }}'
    when: kernel_type == "latest" and kernel_inst_output.changed

  - name: set kernel version for latest type, when no new kernel available
    set_fact:
      kernel_data: "{{ {'kernel_base_url': '', 'kernel_version': ansible_kernel} }}"
    when: kernel_type == "latest" and not kernel_inst_output.changed

  - name: fetch all kernel packages
    # !!! we cannot use get_url because it does not handle https certs correctly, trust wget for now
    command: wget -nv "{{ item }}"
    args:
      chdir: "{{ kernel_download_dir }}"
    # use get because kernel_urls can be not defined
    with_items: "{{ kernel_urls.get(ansible_distribution, '') }}"
    when: (kernel_type == "specific" and kernel_data.kernel_version != ansible_kernel)

  - name: install kernel from downloaded RPMs
    # the yum module will fail installing from URL is the RPM is already installed
    # so we have to download and install from local disk
    action: "{{ ansible_pkg_mgr }} name={{ kernel_urls[ansible_distribution]|map('basename')|map('regex_replace', '^', kernel_download_dir + '/')|join(',') }} state=present"
    when: (kernel_type == "specific" and kernel_data.kernel_version != ansible_kernel)

  # do this after yum installing kernel otherwise yum might block kernel rpm install
  # and we might need to override yum with --disableexcludes=main
  - include: control_kernel_upgrade.yml
