#cloud-config
password: password
chpasswd: { expire: False }
ssh_pwauth: True

# Copyright (c) 2017, Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

write_files:
{% if proxy_env %}
 - path: /etc/systemd/system/docker.service.d/http-proxy.conf
   content: |
    [Service]
{% if proxy_env.http_proxy %}
    Environment="HTTP_PROXY={{ proxy_env.http_proxy }}"
{% endif %}
{% if proxy_env.https_proxy %}
    Environment="HTTPS_PROXY={{ proxy_env.https_proxy }}"
{% endif %}
{% if proxy_env.no_proxy %}
    Environment="NO_PROXY={{ proxy_env.no_proxy }},{{ portip }}"
{% endif %}
{% endif %}
 - path: /tmp/alpine.yaml
   content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: alpine
      namespace: default
    spec:
      containers:
      - image: alpine:latest
        command:
          - /bin/sh
          - "-c"
          - "sleep 60m"
        imagePullPolicy: IfNotPresent
        name: alpine
      restartPolicy: Always
 - path: /etc/systemd/system/kuryr_kubernetes.service
   content: |
    [Unit]
    Description=kuryr-kubernetes service
    After=docker.service
    Requires=docker.service
    [Service]
    ExecStart=/usr/bin/python \
              /opt/stack/kuryr-kubernetes/scripts/run_server.py \
              --config-file /etc/kuryr/kuryr.conf
    Restart=on-failure
    [Install]
    WantedBy=multi-user.target
 - path: /etc/kuryr/kuryr.conf
   content: |
    [kubernetes]
    api_root = "http://{{ portip }}:8080"
    pod_vif_driver = nested-macvlan
    [DEFAULT]
    use_stderr = true
    [neutron]
    memcached_servers = "{{ kolla_internal_vip_address }}:11211"
    #signing_dir = /var/cache/kuryr
    #cafile = /opt/stack/data/ca-bundle.pem
    auth_uri = "http://{{ kolla_internal_vip_address }}:5000"
    project_domain_name = Default
    project_name = service
    user_domain_name = Default
    password = password
    username = kuryr
    auth_url = "http://{{ kolla_internal_vip_address }}:35357"
    auth_type = password
    [neutron_defaults]
    ovs_bridge = br-int
    pod_security_groups = {{ secid }}
    pod_subnet = {{ subid }}
    project = {{ projid }}
    service_subnet =  {{ sersubid }}
    worker_nodes_subnet = {{ subid }}
    [binding]
    link_iface = eth0
 - path: /etc/etcd/etcd.conf
   content: |
    ETCD_NAME=julio
    ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"
    ETCD_ADVERTISE_CLIENT_URLS="http://{{ portip }}:2379"
    ETCD_DATA_DIR="/var/lib/etcd/"
    ETCD_LISTEN_PEER_URLS="http://{{ portip }}:2380"
 - path: /etc/kubernetes/apiserver
   content: |
    KUBE_API_ADDRESS="--address=0.0.0.0"
    KUBE_ETCD_SERVERS="--etcd-servers=http://{{ portip }}:2379"
    KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range=10.20.0.0/24"
    KUBE_API_ARGS=""
 - path: /etc/kubernetes/config
   content: |
    KUBE_MASTER="--master=http://{{ portip }}:8080"
 - path: /etc/kubernetes/kubelet
   content: |
    KUBELET_ADDRESS="--address=0.0.0.0"
    KUBELET_HOSTNAME="--hostname-override={{ portip }}"
    KUBELET_API_SERVER="--api-servers=http://{{ portip }}:8080"
    KUBELET_ARGS="--network-plugin=cni \
                  --cni-bin-dir=/opt/stack/cni/bin \
                  --cni-conf-dir=/opt/stack/cni/conf"

runcmd:
 - setenforce 0
{% if proxy_env %}
{% if proxy_env.http_proxy %}
 - echo proxy={{ proxy_env.http_proxy }} >> /etc/dnf/dnf.conf
 - export http_proxy={{ proxy_env.http_proxy }}
 - echo http_proxy={{ proxy_env.http_proxy }}  >> /etc/environment
{% endif %}
{% if proxy_env.https_proxy %}
 - export https_proxy={{ proxy_env.https_proxy }}
 - echo https_proxy={{ proxy_env.https_proxy }}  >> /etc/environment
{% endif %}
{% if proxy_env.no_proxy %}
 - export no_proxy={{ proxy_env.no_proxy }},{{ portip }}
 - echo no_proxy={{ proxy_env.no_proxy }},{{ portip }} >> /etc/environment
{% endif %}
{% endif %}
 - systemctl mask dnf-makecache.timer
 - sed -i 's/10.0.0.2/{{ os_defaults.networks.int['dns_nameservers'] }}/' /etc/resolv.conf
 - dnf makecache fast
 - dnf install -y git python-devel redhat-rpm-config libffi-devel gcc iptables coreutils ethtool etcd kubernetes go
 - pip install os-testr
 - git clone {{ git_repos['KURYR_KUBERNETES_REPO'] }} /opt/stack/kuryr-kubernetes --branch {{ git_repos['KURYR_KUBERNETES_BRANCH'] }}
 - git clone http://github.com/containernetworking/cni /opt/cni
 - pip install -r /opt/stack/kuryr-kubernetes/requirements
 - pip install /opt/stack/kuryr-kubernetes/.
 - pushd /opt/cni && ./build && popd
 - install -o fedora -m 0555 -D $(which kuryr-cni) /opt/stack/cni/bin/kuryr-cni
 - install -o fedora -m 0555 -D /opt/cni/bin/loopback /opt/stack/cni/bin/loopback
 - install -o fedora -m 0644 -D /opt/stack/kuryr-kubernetes/etc/cni/net.d/10-kuryr.conf /opt/stack/cni/conf/10-kuryr.conf
 - install -o fedora -m 0644 -D /opt/stack/kuryr-kubernetes/etc/cni/net.d/99-loopback.conf /opt/stack/cni/conf/99-loopback.conf
 - for SERVICES in etcd kube-apiserver kube-controller-manager kube-scheduler kubelet docker kuryr_kubernetes; do systemctl restart $SERVICES && systemctl enable $SERVICES; done
 - kubectl create -f /tmp/alpine.yaml

final_message: "all done"
